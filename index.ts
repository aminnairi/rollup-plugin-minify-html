import { Plugin } from 'rollup';
import { readFile, writeFile } from 'fs';

// @ts-ignore
import { minify } from 'html-minifier';

export interface File {
    from: string;
    to: string;
};

export interface MinifyHtmlOptions {
    files: File[];
    htmlMinifierOptions?: HtmlMinifierOptions;
};

export interface HtmlMinifierOptions {
    caseSensitive?: boolean;
    collapseBooleanAttributes?: boolean;
    collapseInlineTagWhitespace?: boolean;
    collapseWhitespace?: boolean;
    conservativeCollapse?: boolean;
    continueOnParseError?: boolean;
    customAttrAssign?: RegExp[];
    customAttrCollapse?: RegExp;
    customAttrSurround?: RegExp[];
    customEventAttributes?: RegExp[];
    decodeEntities?: boolean;
    html5?: boolean;
    ignoreCustomComments?: RegExp[];
    ignoreCustomFragments?: RegExp[];
    includeAutoGeneratedTags?: boolean;
    keepClosingSlash?: boolean;
    maxLineLength?: number;
    minifyCSS?: boolean;
    minifyJS?: boolean;
    minifyURLs?: boolean;
    preserveLineBreaks?: boolean;
    preventAttributesEscaping?: boolean;
    processConditionalComments?: boolean;
    processScripts?: string[];
    quoteCharacter?: string;
    removeAttributeQuotes?: boolean;
    removeComments?: boolean;
    removeEmptyAttributes?: boolean;
    removeEmptyElements?: boolean;
    removeOptionalTags?: boolean;
    removeRedundantAttributes?: boolean;
    removeScriptTypeAttributes?: boolean;
    removeStyleLinkTypeAttributes?: boolean;
    removeTagWhitespace?: boolean;
    sortAttributes?: boolean;
    sortClassName?: boolean;
    trimCustomFragments?: boolean;
    useShortDoctype?: boolean;
};

function fileOpen(path: string): Promise<string> {
    return new Promise(function(resolve, reject) {
        readFile(path, function(error, data) {
            if (error) {
                reject(error);
            }

            resolve(data.toString());
        });
    });
}

function fileWrite(path: string, data: string): Promise<void> {
    return new Promise(function(resolve, reject) {
        writeFile(path, data, function(error) {
            if (error) {
                reject(error);
            }
        
            resolve();
        });
    });
}

export function minifyHtml({ files, htmlMinifierOptions }: MinifyHtmlOptions): Plugin {
    return {
        name: 'rollup-plugin-minify-html',

        async generateBundle(): Promise<void> {
            for (const { from, to } of files) {
                const data: string = await fileOpen(from);
                const minified: string = minify(data, htmlMinifierOptions);

                await fileWrite(to, minified);
            }
        }
    };
}